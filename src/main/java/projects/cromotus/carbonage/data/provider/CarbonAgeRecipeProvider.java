/*
 * This file is part of CarbonAge, licensed under the MIT License (MIT).
 *
 * Copyright (c) 2020 Cromotus
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package projects.cromotus.carbonage.data.provider;

import net.minecraft.block.Blocks;
import net.minecraft.data.*;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.item.crafting.Ingredient;
import net.minecraft.tags.Tag;
import net.minecraft.util.ResourceLocation;
import projects.cromotus.carbonage.CarbonAge;
import projects.cromotus.carbonage.init.CarbonAgeItems;

import java.util.Arrays;
import java.util.Collection;
import java.util.function.Consumer;
import java.util.stream.Stream;

public class CarbonAgeRecipeProvider extends RecipeProvider {
    public CarbonAgeRecipeProvider(DataGenerator generator) {
        super(generator);
    }

    @Override
    protected void registerRecipes(Consumer<IFinishedRecipe> consumer) {
        ShapedRecipeBuilder.shapedRecipe(CarbonAgeItems.MORTAR_STONE, 1)
                .patternLine("S")
                .patternLine("S")
                .patternLine("B")
                .key('S', Blocks.STONE)
                .key('B', CarbonAgeItems.STONE_BOWL)
                .addCriterion("has_stone", hasItem(Blocks.STONE))
                .build(consumer, new ResourceLocation(CarbonAge.MOD_ID, "mortar_stone"));

        ShapelessRecipeBuilder.shapelessRecipe(CarbonAgeItems.COAL_DUST, 1)
                .addIngredient(CarbonAgeItems.TINY_COAL_DUST, 4)
                .addCriterion("has_tiny_coal_dust", hasItem(CarbonAgeItems.TINY_COAL_DUST))
                .build(consumer, new ResourceLocation(CarbonAge.MOD_ID, "coal_dust"));

        CookingRecipeBuilder.smeltingRecipe(Ingredient.fromItems(CarbonAgeItems.MOLD_FILLED), CarbonAgeItems.MOLD_DRIED, 0.1f, 200)
                .addCriterion("has_mold_filled", hasItem(CarbonAgeItems.MOLD_FILLED))
                .build(consumer, new ResourceLocation(CarbonAge.MOD_ID, "mold_dried"));
    }

    //Use this method if a Recipe uses a tag that is not generated by CarbonAge
    private Ingredient getFakeIngredient(Tag<Item> tag){
        return Ingredient.fromItemListStream(Stream.of(new Ingredient.TagList(tag){
            @Override
            public Collection<ItemStack> getStacks() {
                //Item that is used here doesn't matter because it will be serialized as the tag inputted
                return Arrays.asList(new ItemStack(Items.ACACIA_BUTTON));
            }
        }));
    }
}
